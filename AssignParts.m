function [Edges,Loops,Dim] = AssignParts(Edges, Loops, BConds)
% ASSIGNPARTS maps the solving system and assigns each (stiffness or
% boundary) block an entry point and a dimension.
%
%
% ASSIGNPARTS is called by MAINREG and MAINTRI. It receives structures 
% Edges, Loops and BConds as input arguments, and returns the Edges and
% Loops structures, updated with two fields containing the insertion points
% of the respective blocks in the solving system, and their dimensions. It
% also returns Dim, which is the dimension of the solving system.
%
%
% BIBLIOGRAPHY
% 1. FreeHyTE Page - https://sites.google.com/site/ionutdmoldovan/freehyte
% 2. Moldovan ID, Cismasiu I - FreeHyTE: theoretical bases and developer’s 
% manual, https://drive.google.com/file/d/0BxuR3pKS2hNHTzB2N2Q4cXZKcGc/view
% 3. FreeHyTE Structural HTD User's Manual - 
%    https://drive.google.com/drive/folders/0BxuR3pKS2hNHWWkyb2xmTGhLa1k
% 4. Silva V - Elementos finitos híbridos-Trefftz de deslocamento para 
% problemas de elasticidade plana, MSc Thesis, Universidade Nova de Lisboa,
% 2016 (in Portuguese).
%
%
% The layout of a solving system with a single finite element a single
% essential boundary is presented below.
%
%    _______________________________________________________
%   |       |       |       |       |       |       |       |
%   |  K11  |  K12  |  K13  |  K14  |   0   |  B1n  |  B1t  |
%   |_______|_______|_______|_______|_______|_______|_______|
%   |       |       |       |       |       |       |       |
%   |  K21  |  K22  |  K23  |  K24  |   0   |  B2n  |  B2t  |
%   |_______|_______|_______|_______|_______|_______|_______|
%   |       |       |       |       |       |       |       |
%   |  K31  |  K32  |  K33  |  K34  |   0   |  B3n  |  B3t  |
%   |_______|_______|_______|_______|_______|_______|_______|
%   |       |       |       |       |       |       |       |
%   |  K41  |  K42  |  K43  |  K44  |   0   |  B4n  |  B4t  |
%   |_______|_______|_______|_______|_______|_______|_______|
%   |       |       |       |       |       |       |       |
%   |   0   |   0   |   0   |   0   |   0   |  B5n  |  B5t  |
%   |_______|_______|_______|_______|_______|_______|_______|
%   |       |       |       |       |       |       |       |
%   |  B1n  |  B2n  |  B3n  |  B4n  |  B5n  |   0   |   0   |
%   |_______|_______|_______|_______|_______|_______|_______|
%   |       |       |       |       |       |       |       |
%   |  B1t  |  B2t  |  B3t  |  B4t  |  B5t  |   0   |   0   |
%   |_______|_______|_______|_______|_______|_______|_______|
%
%
% The stiffness blocks have entries that correspond to the parts of the 
% bases generated by odd and even, harmonic and biharmonic potentials:
% * 1 - basis generated by odd harmonic potentials;
% * 2 - basis generated by even harmonic potentials;
% * 3 - basis generated by odd biharmonic potentials;
% * 4 - basis generated by even biharmonic potentials;
% * 5 - rigid body modes (no stiffness).
% The stiffness block Kjj belonging to element i is inserted on the main 
% diagonal of the solving system at position Loops.insert(i,j). 
% Its dimension is equal to the order of the domain basis of the respective 
% element, Loops.order(i). Block K33 is an exception, since its lowest 
% order element is null and not included in the basis. Its dimension is
% therefore Loops.order(i)-1. The dimension of the null block that would
% correspond to K55 is 3 (the number of rigid boby modes).
%
% Each boundary 'i' has 5 Bj blocks for each direction where a traction 
% approximation is made. Interior boundaries always have approximations in
% both normal and tangential directions. Exterior Dirichlet boundaries have
% approximations in the direction(s) where displacements are enforced. For
% more insight on how to model different types of boundary conditions,
% please consult Section 4.6 of reference [3].
% The Bj blocks are inserted on the LINES that correspond to the entries of
% the stiffness blocks of the element(s) the boundary belongs to. The entry
% COLUMN of the Bj blocks of boundary i corresponds to Edges.insert(i,1),
% for the normal direction, and Edges.insert(i,2) for the tangential
% direction. The Bj blocks are not square. They have as many lines as the
% shape functions of the neighbouring elements and 
% Edges.dim(i,1 or 2) = Edges.order(i)+1 lines.
%
% The layout and storage of the solving system is discussed at length in
% references [2] (Section 6.2) and [4] (Section 4.4).
% 
%

%% Initialization
% Initializes the current line indicator, entry.
entry = 1;
% Initializes the insertion points for the Kjj blocks
Loops.insert = zeros(length(Loops.area),5); 
% Initializes the dimensions of the Kjj blocks
Loops.dim = zeros(length(Loops.area),5);
% Initializes the insertion points for the boundary blocks
Edges.insert = zeros(length(Edges.type),2); 
% Initializes the dimensions of the boundary blocks
Edges.dim = zeros(length(Edges.type),2); 

%% Mapping of the stiffness entry blocks of the system
% The insertion points of the 5 stiffness blocks and their dismensions are
% computed for each element and stored in the Loops structure.
for i = 1:length(Loops.area)
    % K11 block
    Loops.insert(i,1) = entry;
    Loops.dim(i,1) = Loops.order(i);
    entry = entry + Loops.dim(i,1);
    % K22 block
    Loops.insert(i,2) = entry;
    Loops.dim(i,2) = Loops.order(i);
    entry = entry + Loops.dim(i,2);
    % K33 block
    Loops.insert(i,3) = entry;
    % The lowest order term of K33 is null and not included in the basis.
    % Its dimension is thus inferior to the other blocks.
    Loops.dim(i,3) = Loops.order(i)-1;
    entry = entry + Loops.dim(i,3);
    % K44 block
    Loops.insert(i,4) = entry;
    Loops.dim(i,4) = Loops.order(i);
    entry = entry + Loops.dim(i,4);
    % K55 (= 0) block
    Loops.insert(i,5) = entry;
    % Three rigid body modes
    Loops.dim(i,5) = 3;
    entry = entry + Loops.dim(i,5);  
end


%% Mapping of the boundary entry blocks of the system
% The insertion points of the 5 boundary blocks and their dismensions are
% computed for each edge and stored in the Edges structure.
for i = 1:length(Edges.insert(:,1))
    if strcmpi(Edges.type(i),'D')  % if the egde is Dirichet (or interior)
        % If there's no right element, it's an exterior Dirichlet boundary.
        % Exterior Dirichlet boundaries may have applied displacements in
        % one direction (i.e. normal or tangential) or in both. 
        if(~Edges.lright(i))  
            % If any of the terms in BConds.Dirichlet{i,1} is different 
            % from NaN, it means that displacements are applied in the
            % boundary normal direction. Then, space is stored for the
            % insertion of the boundary matrix.
            if any(~isnan(BConds.Dirichlet{i,1})) 
                Edges.insert(i,1) = entry;
                Edges.dim(i,1) = Edges.order(i)+1;
                entry = entry + Edges.dim(i,1);
            end
            % If any of the terms in BConds.Dirichlet{i,2} is different 
            % from NaN, it means that displacements are applied in the
            % boundary tangential direction. Then, space is stored for the
            % insertion of the boundary matrix.            
            if any(~isnan(BConds.Dirichlet{i,2}))
                Edges.insert(i,2) = entry;
                Edges.dim(i,2) = Edges.order(i)+1;
                entry = entry + Edges.dim(i,2);
            end
        else   % Interior boundaries have boundary matrices in both directions.
                Edges.insert(i,1) = entry;
                Edges.dim(i,1) = Edges.order(i)+1;
                entry = entry + Edges.dim(i,1);
                Edges.insert(i,2) = entry;
                Edges.dim(i,2) = Edges.order(i)+1;
                entry = entry + Edges.dim(i,2);
        end
    end
end  % note that Neumann edges correspond to zero dim, zero insert point

% Computing the total dimension of the solving system
Dim = entry-1;

end

